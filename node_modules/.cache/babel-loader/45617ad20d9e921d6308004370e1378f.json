{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authFail = (error, response) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error,\n    response: response\n  };\n};\nexport const authSuccess = (token, username) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username: username\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('user');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const forgotPassword = () => {\n  return {\n    type: actionTypes.FORGOT_PASSWORD\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return async dispatch => {\n    dispatch(authStart());\n    await axios.post('https://notemaster.herokuapp.com/api/auth/login/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('user', username);\n      dispatch(authSuccess(token, username));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err, err.response));\n    });\n  };\n};\nexport const authSignup = (firstname, lastname, username, email, password1, password2) => {\n  return async dispatch => {\n    dispatch(authStart());\n    await axios.post('https://notemaster.herokuapp.com/api/auth/registration/', {\n      username: username,\n      email: email,\n      first_name: firstname,\n      last_name: lastname,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', username);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(token, username));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err, err.response));\n    });\n  };\n};\nexport const authCheckState = username => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token, username));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/ashutosh/Desktop/pyve/myenv/react-notemaster-master/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authFail","error","response","AUTH_FAIL","authSuccess","token","username","AUTH_SUCCESS","logout","localStorage","removeItem","AUTH_LOGOUT","forgotPassword","FORGOT_PASSWORD","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","password","post","then","res","data","key","expirationDate","Date","getTime","setItem","catch","err","authSignup","firstname","lastname","email","password1","password2","first_name","last_name","authCheckState","getItem","undefined"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\n\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\n\nexport const authFail = (error, response) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error,\n        response: response\n    }\n}\n\n\nexport const authSuccess = (token, username) => {\n\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token,\n        username: username\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('user');\n\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n}\n\n\nexport const forgotPassword = () => {\n    return {\n        type: actionTypes.FORGOT_PASSWORD\n    }\n}\n\n\n\nexport const checkAuthTimeout = expirationTime => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout())\n        }, expirationTime * 1000)\n    }\n}\n\n\n\n\nexport const authLogin =  (username, password) => {\n    return  async (dispatch)  => {\n        dispatch(authStart())\n        await axios.post('https://notemaster.herokuapp.com/api/auth/login/', {\n            username:username,\n            password:password\n        }).then(res => {\n            const token = res.data.key;\n  \n            const expirationDate = new Date(new Date().getTime() + 3600*1000);\n            localStorage.setItem('token', token);\n            localStorage.setItem('expirationDate', expirationDate);\n            localStorage.setItem('user', username);\n\n            dispatch(authSuccess(token, username));\n            dispatch(checkAuthTimeout(3600));\n\n        }).catch( (err)=> {\n          \n            \n            dispatch(authFail(err, err.response))\n        });\n    }\n};\n\n\n\nexport const authSignup = (firstname, lastname, username, email, password1, password2) => {\n    return async(dispatch) => {\n        dispatch(authStart())\n        await axios.post('https://notemaster.herokuapp.com/api/auth/registration/', {\n            username:username,\n            email:email,\n            first_name: firstname,\n            last_name: lastname,\n            password1:password1,\n            password2: password2\n            \n        }).then(res => {\n            const token = res.data.key;\n            const expirationDate = new Date(new Date().getTime() + 3600*1000);\n            localStorage.setItem('token', token);\n            localStorage.setItem('user', username);\n            localStorage.setItem('expirationDate', expirationDate)\n            dispatch(authSuccess(token, username));\n            dispatch(checkAuthTimeout(3600))\n\n        }).catch(err => {\n            dispatch(authFail(err, err.response))\n        })\n    }\n}\n\n\n\nexport const authCheckState = (username) =>{\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if(token === undefined){\n            dispatch(logout())\n        }else{\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\n            if (expirationDate <= new Date() ){\n                dispatch(logout())\n            }else {\n                dispatch(authSuccess(token, username))\n                dispatch(checkAuthTimeout( (expirationDate.getTime() - new Date().getTime()) / 1000 ))\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}